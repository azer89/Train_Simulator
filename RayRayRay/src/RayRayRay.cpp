/*
-----------------------------------------------------------------------------
Filename:    RayRayRay.cpp
-----------------------------------------------------------------------------


This source file is generated by the
   ___                   _              __    __ _                  _ 
  /___\__ _ _ __ ___    /_\  _ __  _ __/ / /\ \ (_)______ _ _ __ __| |
 //  // _` | '__/ _ \  //_\\| '_ \| '_ \ \/  \/ / |_  / _` | '__/ _` |
/ \_// (_| | | |  __/ /  _  \ |_) | |_) \  /\  /| |/ / (_| | | | (_| |
\___/ \__, |_|  \___| \_/ \_/ .__/| .__/ \/  \/ |_/___\__,_|_|  \__,_|
      |___/                 |_|   |_|                                 
      Ogre 1.7.x Application Wizard for VC9 (July 2011)
      http://code.google.com/p/ogreappwizards/
-----------------------------------------------------------------------------
*/

#include "RayRayRay.h"

//-------------------------------------------------------------------------------------
RayRayRay::RayRayRay(void)
{
}
//-------------------------------------------------------------------------------------
RayRayRay::~RayRayRay(void)
{
	mSceneMgr->destroyQuery(mRaySceneQuery);
}

//-------------------------------------------------------------------------------------
void RayRayRay::createFrameListener(void)
{	
	BaseApplication::createFrameListener();

	// hide UI information
	mTrayMgr->hideLogo();
	mTrayMgr->hideFrameStats();
	
	// Setup default variables
    mCount = 0;
    mCurrentObject = NULL;
    mLMouseDown = false;
    mRMouseDown = false;

    // Reduce rotate speed
    mRotateSpeed =.1;

	// Create RaySceneQuery
	this->mRaySceneQuery = mSceneMgr->createRayQuery(Ogre::Ray());
}

//-------------------------------------------------------------------------------------
void RayRayRay::createScene(void)
{	
	// Set ambient light
    mSceneMgr->setAmbientLight(Ogre::ColourValue(0.1, 0.1, 0.1));
    mSceneMgr->setSkyDome(true, "Examples/CloudySky", 5, 8);

    // World geometry
    mSceneMgr->setWorldGeometry("terrain.cfg");

    // Set camera look point
    mCamera->setPosition(40, 100, 580);
    mCamera->pitch(Ogre::Degree(-30));
	
    mCamera->yaw(Ogre::Degree(-45));

	// CEGUI setup
    mGUIRenderer = &CEGUI::OgreRenderer::bootstrapSystem();

	// Mouse
    CEGUI::SchemeManager::getSingleton().create((CEGUI::utf8*)"TaharezLook.scheme");
    CEGUI::MouseCursor::getSingleton().setImage("TaharezLook", "MouseArrow");
}

//-------------------------------------------------------------------------------------
void RayRayRay::chooseSceneManager(void)
{	
	mSceneMgr = mRoot->createSceneManager(Ogre::ST_EXTERIOR_CLOSE);
}

//-------------------------------------------------------------------------------------
bool RayRayRay::frameRenderingQueued(const Ogre::FrameEvent &evt)
{
	if (!BaseApplication::frameRenderingQueued(evt))
		return false;

	// Setup the scene query
    Ogre::Vector3 camPos = mCamera->getPosition();
    Ogre::Ray cameraRay(Ogre::Vector3(camPos.x, 5000.0f, camPos.z), 
		Ogre::Vector3::NEGATIVE_UNIT_Y);
    mRaySceneQuery->setRay(cameraRay);

	// Perform the scene query
    Ogre::RaySceneQueryResult &result = mRaySceneQuery->execute();
    Ogre::RaySceneQueryResult::iterator itr = result.begin();

	// Get the results, set the camera height
	if (itr != result.end() && itr->worldFragment)
	{
		Ogre::Real terrainHeight = itr->worldFragment->singleIntersection.y;

		if ((terrainHeight + 15.0f) > camPos.y)
			mCamera->setPosition( camPos.x, terrainHeight + 10.0f, camPos.z );
	}

	return true;
}

//-------------------------------------------------------------------------------------
bool RayRayRay::mouseMoved(const OIS::MouseEvent &arg)
{	
	// Update CEGUI with the mouse motion
	CEGUI::System::getSingleton().injectMouseMove(arg.state.X.rel, arg.state.Y.rel);
	
    if (mLMouseDown)	// If we are dragging the left mouse button
    {
		CEGUI::Point mousePos = CEGUI::MouseCursor::getSingleton().getPosition();
		Ogre::Ray mouseRay = mCamera->getCameraToViewportRay(mousePos.d_x/float(arg.state.width),mousePos.d_y/float(arg.state.height));
		mRaySceneQuery->setRay(mouseRay);
		Ogre::RaySceneQueryResult &result = mRaySceneQuery->execute();
		Ogre::RaySceneQueryResult::iterator itr = result.begin();

		if (itr != result.end() && itr->worldFragment)
			mCurrentObject->setPosition(itr->worldFragment->singleIntersection);
    } 
    else if (mRMouseDown)	// If we are dragging the right mouse button
    {
        mCamera->yaw(Ogre::Degree(-arg.state.X.rel * mRotateSpeed));
        mCamera->pitch(Ogre::Degree(-arg.state.Y.rel * mRotateSpeed));
    }

	return true;
}

//-------------------------------------------------------------------------------------
bool RayRayRay::mousePressed(const OIS::MouseEvent &arg, OIS::MouseButtonID id)
{	
	
	if(id == OIS::MB_Left) // Left mouse button down
	{
		// Setup the ray scene query, use CEGUI's mouse position
		CEGUI::Point mousePos = CEGUI::MouseCursor::getSingleton().getPosition();
		Ogre::Ray mouseRay = mCamera->getCameraToViewportRay(mousePos.d_x/float(arg.state.width), mousePos.d_y/float(arg.state.height));
		mRaySceneQuery->setRay(mouseRay);
		// Execute query
		Ogre::RaySceneQueryResult &result = mRaySceneQuery->execute();
		Ogre::RaySceneQueryResult::iterator itr = result.begin( );
 
		// Get results, create a node/entity on the position
		if (itr != result.end() && itr->worldFragment)
		{
			char name[16];
			sprintf( name, "Robot%d", mCount++ );
			Ogre::Entity *ent = mSceneMgr->createEntity(name, "robot.mesh");
			mCurrentObject = mSceneMgr->getRootSceneNode()->createChildSceneNode(std::string(name)+ "Node", itr->worldFragment->singleIntersection);
			
			mCurrentObject->attachObject(ent);
			mCurrentObject->setScale(0.1f, 0.1f, 0.1f);
		}

		mLMouseDown = true;
	}
	else if(id == OIS::MB_Right) // Right mouse button down
	{
		CEGUI::MouseCursor::getSingleton().hide();
		mRMouseDown = true;
	}

	return true;
}

//-------------------------------------------------------------------------------------
bool RayRayRay::mouseReleased(const OIS::MouseEvent &arg, OIS::MouseButtonID id)
{	
	if(id == OIS::MB_Left) // Left mouse button up
	{
		mLMouseDown = false;
	}
	else if(id == OIS::MB_Right) // Right mouse button up
	{
		CEGUI::MouseCursor::getSingleton().show();
		mRMouseDown = false;
	}

	return true;
}

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
#define WIN32_LEAN_AND_MEAN
#include "windows.h"
#endif

#ifdef __cplusplus
extern "C" {
#endif

#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
    INT WINAPI WinMain( HINSTANCE hInst, HINSTANCE, LPSTR strCmdLine, INT )
#else
    int main(int argc, char *argv[])
#endif
    {
        // Create application object
        RayRayRay app;

        try {
            app.go();
        } catch( Ogre::Exception& e ) {
#if OGRE_PLATFORM == OGRE_PLATFORM_WIN32
            MessageBox( NULL, e.getFullDescription().c_str(), "An exception has occured!", MB_OK | MB_ICONERROR | MB_TASKMODAL);
#else
            std::cerr << "An exception has occured: " <<
                e.getFullDescription().c_str() << std::endl;
#endif
        }

        return 0;
    }

#ifdef __cplusplus
}
#endif
